{
  "name": "koa-jsonp",
  "version": "0.0.3",
  "description": "JSONP middleware with GET/POST support for koajs",
  "main": "index.js",
  "scripts": {
    "test": "make test"
  },
  "repository": {
    "type": "git",
    "url": "git@github.com:kilianc/koa-jsonp.git"
  },
  "keywords": [
    "koa",
    "koajs",
    "jsonp",
    "json-streaming"
  ],
  "author": {
    "name": "Kilian Ciuffolo",
    "email": "me@nailik.org"
  },
  "license": "MIT",
  "bugs": {
    "url": "https://github.com/kilianc/koa-jsonp/issues"
  },
  "homepage": "https://github.com/kilianc/koa-jsonp",
  "devDependencies": {
    "chai": "~1.8.1",
    "mocha": "~1.16.2",
    "JSONStream": "~0.7.1",
    "koa": "~0.1.2",
    "request": "~2.30.0",
    "koa-mount": "~1.2.2",
    "json-array-stream": "~0.1.2"
  },
  "dependencies": {},
  "readme": "# koa-jsonp\nA [koajs](https://github.com/koajs/koa) streaming friendly JSONP middleware that supports GET/POST JSONP requests.\n\n## Install\n    $ npm install koa-jsonp\n\n## Example\n\n```js\nvar db = require('nano')('http://localhost:5984/my_db')\n  , stringify = require('json-array-stream')\n  , jsonp = require('koa-jsonp')\n\napp.use(jsonp())\n\napp.use(mount('/users', function *() {\n  this.type = 'json'\n  this.body = db.view('koa_example', 'users')\n    .pipe(JSONStream.parse('rows.*.value'))\n    .pipe(stringify())\n}))\n\napp.use(mount('/dow', function *() {\n  this.body = ['Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat']\n}))\n\napp.listen(8080)\n```\n\nyield\n\n    GET  http://localhot:8080/users                       -> JSON\n    POST http://localhot:8080/users                       -> JSON\n    GET  http://localhot:8080/users?callback=onUserList   -> JSONP\n    POST http://localhot:8080/users?callback=onUserList   -> JSONP + iFrame\n\n    GET  http://localhot:8080/dow                         -> JSON\n    POST http://localhot:8080/dow                         -> JSON\n    GET  http://localhot:8080/dow?callback=dowReady       -> JSONP\n    POST http://localhot:8080/dow?callback=dowReady       -> JSONP + iFrame\n\n## API\n\n```js\nfunction jsonp(options)\n```\n\nReturns the generator middleware.\n\n### Options\n* **domain** - (`String`: defaults to `'.default.lan'`) the first level domain where your API will be consumed. Used in iframe mode ([???](#cors))\n* **callbackName**: (`String`: defaults to `'callback'`) The name of the JSONP callback\n\n### Use cases\n\n* __JSONP__: `text/javascript`\n* __JSONP + iFrame__: `text/html`\n\nThe middleware auto selects the right format based on the presence of callback (querystring) and the HTTP method.\n\n![table](http://f.cl.ly/items/460B2P0h3m3c22000W1p/json-transport-0.1.0.png)\n\n# JSONP CORS\n\n*This is not required if your frontend and your API run in the same domain or if you set the `Access-Control-*` headers properly. In this case just use an `XMLHttpRequest` and don't use this middleware at all. Reference: [MDN](https://developer.mozilla.org/en/docs/HTTP/Access_control_CORS) - [HTML5Rocks](http://www.html5rocks.com/en/tutorials/cors/) - [SO](http://stackoverflow.com/questions/13146892/cors-access-control-allow-headers-wildcard-being-ignored)*\n\nThere is a way to read a JSONP response after sending a POST request (form) in the browser. The solution is to set an iframe as target of the form (could be hidden). The iframe will load your response page, in this case plain HTML with a script tag and will call your `callback` using `parent.callbackname(data)`.\n\nThis is an old snippet using `mootools` that creates a form, an iframe, and posts your request. Then dispose everything after executing your callback.\nYou can easily port it to jQuery.\n\n```js\nvar __requestsMap__ = {}\n\nfunction post(url, fields, callback) {\n  var requestId = new Date().getTime()\n  var inputs = []\n\n  Object.keys(fields).forEach(function (fieldName) {\n    inputs.push(new Element('input', {\n      name: fieldName,\n      value: data[fieldName]\n    }))\n  })\n\n  if (url.match(/\\?/)) {\n    url += '&callback=__requestsMap__[\"' + requestId + '\"]'\n  } else {\n    url += '?callback=__requestsMap__[\"' + requestId + '\"]'\n  }\n\n  var form = new Element('form', {\n    'enctype': enctype,\n    'method': 'post',\n    'action': url,\n    'target': requestId,\n    'style': 'display: none'\n  }).adopt(inputs).inject(document.body)\n\n  var iframe = new Element('iframe', {\n    id: requestId,\n    name: requestId,\n    styles: { display: 'none' }\n  }).inject(document.body)\n\n  __requestsMap__[requestId] = function (response) {\n    callback(null, response)\n    // cleanup\n    delete __requestsMap__[requestId]\n    iframe.dispose().destroy()\n    form.dispose().destroy()\n  }\n\n  form.submit()\n}\n```\n\n# How to contribute\n\nkoa-jsonp follows (more or less) the [Felix's Node.js Style Guide](http://nodeguide.com/style.html), your contribution must be consistent with this style.\n\nThe test suite is written on top of [visionmedia/mocha](http://visionmedia.github.com/mocha/) and it took hours of hard work. Please use the tests to check if your contribution is breaking some part of the library and add new tests for each new feature.\n\n    ⚡ npm test\n\nand for your test coverage\n\n    ⚡ make test-cov\n\n## License\n\n_This software is released under the MIT license cited below_.\n\n    Copyright (c) 2013 Kilian Ciuffolo, me@nailik.org. All Rights Reserved.\n\n    Permission is hereby granted, free of charge, to any person\n    obtaining a copy of this software and associated documentation\n    files (the 'Software'), to deal in the Software without\n    restriction, including without limitation the rights to use,\n    copy, modify, merge, publish, distribute, sublicense, and/or sell\n    copies of the Software, and to permit persons to whom the\n    Software is furnished to do so, subject to the following\n    conditions:\n\n    The above copyright notice and this permission notice shall be\n    included in all copies or substantial portions of the Software.\n\n    THE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND,\n    EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES\n    OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\n    NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT\n    HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,\n    WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n    FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR\n    OTHER DEALINGS IN THE SOFTWARE.\n",
  "readmeFilename": "README.md",
  "_id": "koa-jsonp@0.0.3",
  "_from": "koa-jsonp@*"
}
